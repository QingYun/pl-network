{"ns:m.04jmsgx":{"rdfs:label":["MVEL"],"ns:common.topic.description":["MVFLEX Expression Language is a hybrid dynamic/statically typed, embeddable Expression Language and runtime for the Java Platform. Originally started as a utility language for an application framework, the project is now developed completely independently.\\nMVEL is typically used for exposing basic logic to end-users and programmers through configuration such as XML files or annotations. It may also be used to parse simple JavaBean expressions.\\nThe runtime allows MVEL expressions to be executed either interpretively, or through a pre-compilation process with support for runtime bytecode generation to remove overhead.\\nSince MVEL is meant to augment Java-based software, it borrows most of its syntax directly from the Java programming language with some minor differences and additional capabilities. For example: as a side effect of MVEL's typing model, which treats class and method references as regular variables, it is possible to use both class and function pointers.\\nMVEL also allows collections to be represented as folds in a Lisp-like syntax."],"key:en":["mvel"],"ns:common.topic.official_website":["<http://mvel.codehaus.org/>"],"ns:common.topic.article":[{"ns:common.document.text":["MVFLEX Expression Language (MVEL) is a hybrid dynamic/statically typed, embeddable Expression Language and runtime for the Java Platform. Originally started as a utility language for an application framework, the project is now developed completely independently.\\nMVEL is typically used for exposing basic logic to end-users and programmers through configuration such as XML files or annotations. It may also be used to parse simple JavaBean expressions.\\nThe runtime allows MVEL expressions to be executed either interpretively, or through a pre-compilation process with support for runtime bytecode generation to remove overhead.\\nSince MVEL is meant to augment Java-based software, it borrows most of its syntax directly from the Java programming language with some minor differences and additional capabilities. For example: as a side effect of MVEL's typing model, which treats class and method references as regular variables, it is possible to use both class and function pointers (but only for static methods).\\nMVEL also allows collections to be represented as folds (or projections) in a Lisp-like syntax.\\nMVEL relies on Java namespaces and classes, but does not possess the ability to declare"],"ns:common.document.source_uri":["<http://wp/en/19100445>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bk19gt"],"ns:common.webpage.uri":["<http://mvel.codehaus.org/>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.04jmsgx"]}],"ns:type.object.name":["MVEL"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125cb6_3z"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}