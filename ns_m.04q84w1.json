{"ns:m.04q84w1":{"ns:common.topic.description":["ATS is a programming language designed to unify programming with formal specification. There is support in ATS for combining theorem proving with practical programming through the use of advanced type systems. The performance of ATS has been demonstrated to be comparable to that of the C and C++ programming languages. By using theorem proving and strict type checking, the compiler can detect and prove that its implemented functions are not susceptible to bugs such as division by zero, memory leaks, buffer overflow, and other forms of memory corruption by verifying pointer arithmetic and reference counting before the program compiles. Additionally, by using the integrated theorem-proving system of ATS, the programmer may make use of static constructs that are intertwined with the operative code to prove that a function attains its specification."],"rdfs:label":["ATS"],"ns:common.topic.official_website":["<http://www.ats-lang.org/>"],"ns:common.topic.article":[{"ns:common.document.text":["ATS (Applied Type System) is a programming language whose stated purpose is to support theorem proving in combination with practical programming through the use of advanced type systems. The performance of ATS has been demonstrated to be comparable to that of the C and C++ programming languages. By using theorem proving, and strict type checking, the compiler can detect and prove that its implemented functions are not susceptible to bugs such as division by zero, memory leaks, buffer overflow, and other forms of memory corruption by verifying pointer arithmetic and reference counting before the program compiles.\\nATS is derived mostly from the ML and OCaml programming languages. An earlier language, Dependent ML, by the same author has been incorporated by the language.\\nThe primary focus of ATS is to support theorem proving in combination with practical programming. With theorem proving one can prove, for instance, that an implemented function does not produce memory leaks. It also prevents other bugs that might otherwise only be found during testing. It incorporates a system similar to those of proof assistants which usually only aimed at verify mathematical proofs -- except ATS"],"ns:common.document.source_uri":["<http://wp/en/19905196>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0blzfs2"],"ns:common.webpage.uri":["<http://www.ats-lang.org/>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.04q84w1"]}],"ns:type.object.name":["ATS"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125d3_863"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.068fcp"]}}