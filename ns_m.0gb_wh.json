{"ns:m.0gb_wh":{"ns:common.topic.description":["Lisaac is a statically typed prototype-based language conceived by Benoît Sonntag, in which the Isaac operating system is being written.\\nThe developers of Lisaac also included features such as dynamic inheritance from Self and contract programming from Eiffel. Despite being statically typed, it also shows homoiconic properties. The Lisaac transpiler produces optimized ANSI C code. Compiling results show that it is possible to obtain executables from a high-level prototype-based language that are as fast as C programs."],"rdfs:label":["Lisaac"],"key:en":["lisaac"],"ns:common.topic.official_website":["<http://isaacproject.u-strasbg.fr/li.html>"],"ns:common.topic.topical_webpage":["<http://www.lisaac.org/>"],"ns:computer.programming_language.language_designers":["Benoît Sonntag"],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bl4fy4"],"ns:common.webpage.uri":["<http://www.lisaac.org>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.0gb_wh"]}],"ns:common.topic.article":[{"ns:common.document.text":["Lisaac is a compiled object-oriented programming language based on prototype concepts, with system programming facilities and design by contract.\\nLisaac's developers admired both Self's flexibility and dynamic inheritance, and Eiffel's static typing and design by contract features. Seeking to combine these two apparently contradictory feature sets, Lisaac was created.\\nLisaac was designed as the language in which the Isaac operating system would be programmed.\\nThe Lisaac transpiler produces optimized ANSI C code, which can then be compiled on every architecture with an appropriate C compiler which makes Lisaac a real multi-platform language. Compiling results show that it is possible to obtain executables from a high-level prototype-based language that are as fast as C programs.\\nDespite being strongly typed, there is no difference between code and data.\\nLisaac is case sensitive. Keywords are capitalized (Section, Header, Public, …), type identifiers are written in upper case letters (INTEGER, BOOLEAN, OBJECT, …), and identifiers denoting variables and slots are written in lower case letters. Objects are composed of slots, which can be data or code. The ':' symbol is used to declare"],"ns:common.document.source_uri":["<http://wp/en/6570627>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["2003"],"ns:type.object.name":["Lisaac"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1258v91_1"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.0gd42"],"ns:computer.programming_language.language_paradigms":["ns:m.0gkc5"]}}