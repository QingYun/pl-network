{"ns:m.0642ddz":{"rdfs:label":["Universal Systems Language"],"ns:common.topic.description":["Unlike traditional languages, the Universal Systems Language is a computer system language based on a preventive instead of a curative paradigm. Based on systems theory, to a great extent derived from lessons learned from the Apollo onboard flight software effort, USL has evolved over several decades and taken on multiple dimensions as a systems engineering approach.\\nUSL is a completely different way to think about systems: instead of object-oriented and model-driven systems, the designer thinks in terms of system-oriented objects and system-driven models. Much of what seems counter-intuitive with traditional approaches, which tend to be software-centric, becomes intuitive with this systems-centric approach.\\nUSL was created by Margaret Hamilton for designing systems with significantly increased reliability, higher productivity, and lower risk. It was designed to achieve the following objectives:\\nreduce complexity and bring clarity into the thinking process;\\nensure correctness by inherent, universal, built-in language properties;\\nensure seamless integration from systems to software;\\nensure traceability and evolvability,\\ndevelop unambiguous requirements, specifications, and design;"],"key:en":["universal_systems_language"],"ns:common.topic.article":[{"ns:common.document.text":["Unlike traditional languages, the Universal Systems Language (USL) is based on a preventative instead of a curative paradigm. Based on systems theory, to a great extent derived from lessons learned from the Apollo onboard flight software effort, USL has evolved over several decades (originally called 001AXES) and taken on multiple dimensions as a Systems Engineering approach.\\nUSL is a completely different way to think about systems: instead of object-oriented and model-driven systems, the designer thinks in terms of system-oriented objects (SOOs) and system-driven models. Much of what seems counterintuitive with traditional approaches, which tend to be software-centric, becomes intuitive with this systems-centric approach.\\nUSL was created for designing systems with significantly increased reliability, higher productivity, and lower risk. It was designed with the following objectives in mind:\\nUSL together with its automation, can address these objectives because of the systems theory that forms its foundations. It also takes roots from other sourcesâ€“other real-world systems and formal linguistics, methods, and object technologies.\\nUSL had as its origin its creators' study of the"],"ns:common.document.source_uri":["<http://wp/en/22863030>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.image":[{"ns:type.content.blob_id":["67658e2f535805334027bfe2a31dafb65f11ee689cbcd26553479fcd565f25bf"],"ns:type.content.length":["82987"],"ns:common.image.rights_holder_text_attribution":["Hamilton Technologies, Inc."],"rdfs:label":["Ucs rules"],"ns:type.content.uploaded_by":["ns:m.0220tm0"],"ns:common.image.size":["ns:m.029v2jk"],"ns:common.licensed_object.license":["ns:m.034jd"],"ns:type.content.source":["ns:m.078cg8s"],"ns:type.content.media_type":["ns:m.08y0"],"ns:type.object.name":["Ucs rules"],"rdf:type":["ns:type.content"],"ns:common.image.appears_in_topic_gallery":["ns:m.0642ddz"]}],"ns:type.object.name":["Universal Systems Language"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1258vfn05"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}