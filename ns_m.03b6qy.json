{"ns:m.03b6qy":{"ns:common.topic.description":["ICI is a general purpose interpreted, computer programming language originally developed by Tim Long in the late 1980s. It has dynamic typing and flexible data types, with the basic syntax, flow control constructs and operators of C. It can be considered broadly similar to Perl, with which it is roughly contemporary. Like Perl, it also has tight integration with regular expressions.\\nICI is not an acronym.\\nPrimitive data types in ICI include integers, reals, strings, files, safe pointers, and regular expressions. Aggregate data types are arrays, sets, and associative tables. Sets can be heterogeneous, nested, and support the usual set operations: union, intersection, etc.\\nThe language supports subroutines and nested modules. All variables are lexically scoped at the subroutine or module level, but unlike most structured languages, ICI allows the current scope to be adjusted.\\nICI is not object-based, many object programming features can be emulated in the language by using a data structure inheritance feature called super-structures.\\nTo support application development, ICI has C-like file I/O and system interface support, as well as a high-level event trigger facility."],"rdfs:label":["ICI"],"key:en":["ici_programming_language"],"ns:common.topic.article":[{"ns:common.document.text":["ICI is a general purpose interpreted, computer programming language originally developed by Tim Long in the late 1980s. It has dynamic typing and flexible data types, with the basic syntax, flow control constructs and operators of C. It can be considered broadly similar to Perl, with which it is roughly contemporary. Like Perl, it also has tight integration with regular expressions.\\nICI is not an acronym.\\nPrimitive data types in ICI include integers, reals, strings, files, safe pointers, and regular expressions. Aggregate data types are arrays, sets, and associative tables. Sets can be heterogeneous, nested, and support the usual set operations: union, intersection, etc.\\nThe language supports subroutines and nested modules. All variables are lexically scoped at the subroutine or module level, but unlike most structured languages, ICI allows the current scope to be adjusted (Tcl also allows this, for example).\\nICI is not object-based, many object programming features can be emulated in the language by using a data structure inheritance feature called super-structures.\\nTo support application development, ICI has C-like file I/O and system interface support, as well as a high-level"],"ns:common.document.source_uri":["<http://wp/en/771935>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["ICI"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125dr6fl7"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}