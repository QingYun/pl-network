{"ns:m.0g90qh":{"ns:common.topic.description":["Cayenne is a functional programming language with dependent types. The basic types are functions, products, and sums. Functions and products use dependent types to gain additional power.\\nThere are very few building blocks in the language, but much syntactic sugar to make it more readable. The syntax is largely borrowed from Haskell.\\nThere is no special module system, because with dependent types records are powerful enough to define modules.\\nThe main aim with Cayenne is not to use the types to express specifications, but rather to use the type system to give type to more functions. An example of a function that can be given a type in Cayenne is printf.\\nThe Cayenne implementation is written in Haskell, and it also translates to Haskell."],"rdfs:label":["Cayenne"],"key:en":["cayenne_programming_language"],"ns:common.topic.article":[{"ns:common.document.text":["Cayenne is a functional programming language with dependent types. The basic types are functions, products, and sums. Functions and products use dependent types to gain additional power.\\nThere are very few building blocks in the language, but a lot of syntactic sugar to make it more readable. The syntax is largely borrowed from Haskell.\\nThere is no special module system, because with dependent types records (products) are powerful enough to define modules.\\nThe main aim with Cayenne is not to use the types to express specifications (although this can be done), but rather to use the type system to give type to more functions. An example of a function that can be given a type in Cayenne is printf.\\nThe Cayenne implementation is written in Haskell, and it also translates to Haskell."],"ns:common.document.source_uri":["<http://wp/en/6528823>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["Cayenne"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1259v0q79"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"],"ns:computer.programming_language.influenced_by":["ns:m.03j_q"]}}