{"ns:m.0bxzs64":{"ns:common.topic.description":["Joyce is a secure, concurrent programming language designed by Per Brinch Hansen in the 1980s. It is based on the sequential language Pascal and the principles of Communicating Sequential Processes. It was created to address the shortcomings of CSP to be applied itself as a programming language, and to provide a tool, primarily for teaching, for distributed system implementation.\\nThe language is based around the concept of agents; concurrently executed pocesses that communicate only by the use of channels and message passing. Agents may activate sub-agents dynamically and recursively. The development of Joyce formed the foundation of the language SuperPascal, also developed by Brinch Hansen around 1993."],"rdfs:label":["Joyce"],"ns:computer.programming_language.language_designers":["Brinch Hansen"],"ns:common.topic.article":[{"ns:common.document.text":["Joyce is a secure, concurrent programming language designed by Per Brinch Hansen in the 1980s. It is based on the sequential language Pascal and the principles of Communicating Sequential Processes (CSP). It was created to address the shortcomings of CSP to be applied itself as a programming language, and to povide a tool, primarily for teaching, for distributed system implementation.\\nThe language is based around the concept of agents; concurrently executed pocesses that communicate only by the use of channels and message passing. Agents may activate sub-agents dynamically and recursively. The development of Joyce formed the foundation of the language SuperPascal, also developed by Brinch Hansen around 1993.\\nJoyce is based on a small subset of Pascal, extended with features inspired from CSP for concurrency. The following sections describe the some of the more novel features that were introduced.\\nAgents\\nAn agent is a procedure consisting of a set of statements and possibly nested definitions of other agents. An agent may dynamically activate sub-agents which execute concurrently with their creator. An agent can terminate only when all of its sub-agents have also terminated. For"],"ns:common.document.source_uri":["<http://wp/en/27328300>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["1987"],"ns:type.object.name":["Joyce"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1yl5s18sl"],"ns:computer.programming_language.language_paradigms":["ns:m.06w_b"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.05y49"],"ns:computer.programming_language.influenced":["ns:m.09gjwxg"]}}