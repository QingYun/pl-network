{"ns:m.02g746":{"rdfs:label":["S/SL programming language"],"ns:common.topic.description":["The Syntax/Semantic Language is an executable high level specification language for recursive descent parsers, semantic analyzers and code generators developed by James Cordy, Ric Holt and David Wortman at the University of Toronto in 1980.\\nS/SL is a small programming language that supports cheap recursion and defines input, output, and error token names, semantic mechanisms and a pseudo-code program that defines the syntax of the input language by the token stream the program accepts. Alternation, control flow and one-symbol look-ahead constructs are part of the language.\\nThe S/SL processor compiles this pseudo-code into a table that is interpreted by the S/SL table-walker. The pseudo-code language processes the input language in LL recursive descent style but extensions allow it to process any LR language relatively easily. S/SL is designed to provide excellent syntax error recovery and repair. It is more powerful and transparent than Yacc but can be slower."],"key:en":["s_sl_programming_language"],"ns:common.topic.article":[{"ns:common.document.text":["The Syntax/Semantic Language (S/SL) is an executable high level specification language for recursive descent parsers, semantic analyzers and code generators developed by James Cordy, Ric Holt and David Wortman at the University of Toronto in 1980.\\nS/SL is a small programming language that supports cheap recursion and defines input, output, and error token names (& values), semantic mechanisms (class interfaces whose methods are really escapes to routines in a host programming language but allow good abstraction in the pseudo-code) and a pseudo-code program that defines the syntax of the input language by the token stream the program accepts. Alternation, control flow and one-symbol look-ahead constructs are part of the language.\\nThe S/SL processor compiles this pseudo-code into a table (byte-codes) that is interpreted by the S/SL table-walker (interpreter). The pseudo-code language processes the input language in LL(1) recursive descent style but extensions allow it to process any LR(k) language relatively easily. S/SL is designed to provide excellent syntax error recovery and repair. It is more powerful and transparent than Yacc but can be slower.\\nS/SL's \\\"semantic mechanisms\\\""],"ns:common.document.source_uri":["<http://wp/en/485828>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["S/SL programming language"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1257lwls9"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}