{"ns:m.06svrt":{"ns:common.topic.description":["SAC is a strict purely functional programming language whose design is focused on the needs of numerical applications. Emphasis is laid on efficient support for array processing. Efficiency concerns are essentially twofold. On the one hand, efficiency in program development is to be improved by the opportunity to specify array operations on a high level of abstraction. On the other hand, efficiency in program execution, i.e. the runtime performance of programs, in time and memory consumption, is still to be achieved by sophisticated compilation schemes. Only as far as the latter succeeds, the high-level style of specifications can actually be called useful.\\nTo facilitate compiling to efficiently executable code, certain functional language features which are not considered essential for numerical applications, e.g. higher-order functions, polymorphism, or lazy evaluation, are not supported by SAC. These may be found in general-purpose functional languages, e.g. Haskell, Clean, Miranda, or ML.\\nTo overcome the acceptance problems encountered by other functional or array based languages intended for numerical / array intensive applications, e.g."],"rdfs:label":["SAC programming language"],"key:en":["sac_programming_language"],"ns:common.topic.official_website":["<http://www.sac-home.org/>"],"ns:common.topic.webpage":[{"ns:common.webpage.uri":["<http://www.sac-home.org>"],"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bk032r"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.06svrt"]}],"ns:common.topic.image":[{"ns:type.content.length":["5056"],"ns:type.content.blob_id":["6e0fddfa38e9fffbc1ae5b588eb60530e339557c78dcb2dbb3d7b21d94e63487"],"rdfs:label":["SAC_language_logo"],"ns:common.licensed_object.license":["ns:m.034jd"],"ns:common.image.size":["ns:m.02dfsr2"],"ns:type.content.source":["ns:m.041c3sd"],"ns:type.content.media_type":["ns:m.08y0"],"ns:type.object.name":["SAC_language_logo"],"rdf:type":["ns:type.content"],"ns:common.image.appears_in_topic_gallery":["ns:m.06svrt"]}],"ns:common.topic.article":[{"ns:common.document.text":["SAC (Single Assignment C) is a strict purely functional programming language which design is focused on the needs of numerical applications. Emphasis is laid on efficient support for array processing. Efficiency concerns are essentially twofold. On the one hand, efficiency in program development is to be improved by the opportunity to specify array operations on a high level of abstraction. On the other hand, efficiency in program execution, i.e. the runtime performance of programs, in time and memory consumption, is still to be achieved by sophisticated compilation schemes. Only as far as the latter succeeds, the high-level style of specifications can actually be called useful.\\nTo facilitate compiling to efficiently executable code, certain functional language features which are not considered essential for numerical applications, e.g. higher-order functions, polymorphism, or lazy evaluation, are not (yet) supported by SAC. These may be found in general-purpose functional languages, e.g. Haskell, Clean, Miranda, or ML.\\nTo overcome the acceptance problems encountered by other functional or array based languages intended for numerical / array intensive applications, e.g. SISAL,"],"ns:common.document.source_uri":["<http://wp/en/2179985>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["1994"],"ns:type.object.name":["SAC programming language"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125ghjdf5"],"ns:computer.programming_language.influenced_by":["ns:m.0q1d"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.03m62t"]}}