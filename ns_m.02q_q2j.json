{"ns:m.02q_q2j":{"ns:common.topic.description":["TOM was an object-oriented programming language developed in the 1990s that built on the lessons learned from Objective-C. The main purpose of TOM was to allow for \\\"unplanned reuse\\\" of code via a well-developed extension mechanism. This concept was introduced seemingly by accident in Objective-C and later proved to be of wide use, and was applied aggressively in TOM.\\nThe primary changes in TOM are the addition of multiple inheritance, tuples as a first-class part of the language, cleaner syntax, free of the C requirements for header files and pre-compiler commands, and the ability to use categories to include anything.\\nIt is this latter ability that represents \\\"the whole idea\\\". Unlike Objective-C's categories that allowed only new methods to be built onto existing classes, TOM allowed the addition of class and instance variables, new methods, even new superclasses. This results in the redefinition of \\\"class\\\" as \\\"a class is defined by its main definition and any extensions\\\", these extensions have become a first-class citizen of the language.\\nDevelopment of the TOM language has ceased."],"rdfs:label":["TOM"],"ns:common.topic.article":[{"ns:common.document.text":["TOM was an object-oriented programming language developed in the 1990s that built on the lessons learned from Objective-C. The main purpose of TOM was to allow for \\\"unplanned reuse\\\" of code via a well-developed extension mechanism. This concept was introduced seemingly by accident in Objective-C and later proved to be of wide use, and was applied aggressively in TOM.\\nThe primary changes in TOM are the addition of multiple inheritance, tuples as a first-class part of the language, cleaner syntax, free of the C requirements for header files and pre-compiler commands, and the ability to use categories (the re-use mechanism) to include anything.\\nIt is this latter ability that represents \\\"the whole idea\\\". Unlike Objective-C's categories that allowed only new methods to be built onto existing classes, TOM allowed the addition of class and instance variables, new methods, even new superclasses. This results in the redefinition of \\\"class\\\" as \\\"a class is defined by its main definition and any extensions\\\", these extensions have become a first-class citizen of the language (similarly to Ruby).\\nDevelopment of the TOM language has ceased."],"ns:common.document.source_uri":["<http://wp/en/11090266>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["TOM"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125640lnd"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.05prj"],"ns:computer.programming_language.influenced_by":["ns:m.05q31"]}}