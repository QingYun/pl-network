{"ns:m.02vmlcq":{"rdfs:label":["V"],"ns:common.topic.article":[{"ns:common.document.text":["The V programming language is a purely functional programming language based on composition of functions rather than lambda calculus . It was inspired by Joy but is closer in spirit to PostScript.\\nThe language is concatenative, meaning that it is based on composition of functions and does not have a need for formal parameters. It is also stack based with postfix notation. Every thing is a function (also called a word) in this language. Each word takes its arguments from the stack and places its output(s) in the stack. The literals (strings and numbers) are functions that consume nothing but place themselves in the stack.\\nwill compute (2 * 3) + 4\\nwill compute 2 * 2 (dup is a word that duplicates the top most word in the stack)\\nThe primary data structure is the Quote, represented by '[' and ']' It is also used to represent the code.\\nUnlike Joy which enforces static word definitions, V allows definition of words during runtime using the word '.' It is similar to PostScript in this respect.\\nThe word '.' pops the last quote from the stack, splits it into a pair containing name and definition, and associates the name with the definition.\\nThe Quick sort is defined as below. Notice how the"],"ns:common.document.source_uri":["<http://wp/en/12033714>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["2007"],"ns:type.object.name":["V"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1255z_s9_"],"ns:computer.programming_language.language_paradigms":["ns:m.03p3g9"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.06016"]}}