{"ns:m.02rxfm7":{"ns:common.topic.description":["XMTC is a shared-memory parallel programming language. It is an extension of the C programming language which strives to enable easy PRAM-like programming based on the explicit multi-threading paradigm. It is developed as part of the XMT PRAM-On-Chip vision by a research team at the University of Maryland, College Park, led by Dr. Uzi Vishkin.\\nThe philosophy of XMTC and the whole XMT project is that parallel programming is a hard intellectual task and the approach of building a hardware system first and then figuring out how to program them has not had much success. For that reason a robust algorithmic theory and a reasonably easy hardware abstraction should be the specifications that guide how to build a new parallel architecture and programming language. For parallel algorithms the algorithmic theory that has the largest body of literature is called PRAM. This is not a coincidence, since PRAM is a natural way in which to think algorithmically in parallel. In the early 90's the PRAM model was deemed unrealistic because the hardware abstraction it was based on could not be implemented."],"rdfs:label":["XMTC"],"key:en":["xmtc"],"ns:common.topic.article":[{"ns:common.document.text":["XMTC (for explicit multi-threading C) is a shared-memory parallel programming language. It is an extension of the C programming language which strives to enable easy PRAM-like programming based on the explicit multi-threading paradigm. It is developed as part of the XMT PRAM-On-Chip vision by a research team at the University of Maryland, College Park, led by Dr. Uzi Vishkin.\\nThe philosophy of XMTC and the whole XMT project is that parallel programming is a hard intellectual task and the approach of building a hardware system first and then figuring out how to program them has not had much success. For that reason a robust algorithmic theory and a reasonably easy hardware abstraction should be the specifications that guide how to build a new parallel architecture and programming language. For parallel algorithms the algorithmic theory that has the largest body of literature is called PRAM (Parallel Random Access Machine). This is not a coincidence, since PRAM is a natural way in which to think algorithmically in parallel. In the early 90's the PRAM model was deemed unrealistic because the hardware abstraction it was based on could not be implemented (because of low inter-chip"],"ns:common.document.source_uri":["<http://wp/en/11904143>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["XMTC"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125chk5l6"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}