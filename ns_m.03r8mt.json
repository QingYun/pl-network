{"ns:m.03r8mt":{"ns:common.topic.description":["Hope is a small functional programming language developed in the 1970s at Edinburgh University. It predates Miranda and Haskell and is contemporaneous with ML. Hope was derived from NPL, a simple functional language developed by Burstall and Darlington in their work on program transformation. NPL was, in turn, derived from Kleene Recursion Equations. NPL and Hope are notable for being the first languages with call-by-pattern evaluation and algebraic data types. SNOBOL is even older, and its 'patterns' may qualify as a hybrid between call-by-pattern and regular expression matching. Hope is an important language in the development of functional programming.\\nHope was named for Sir Thomas Hope, a Scottish agricultural reformer, after whom Hope Park Square in Edinburgh, the location of the Department of Artificial Intelligence at the time of the development of Hope, was also named.\\nA factorial program in Hope is\\nUnlike in Haskell, changing the order of the clauses would not change the meaning of the program, because Hope's pattern matching always favors more specific patterns over less specific ones."],"rdfs:label":["Hope"],"key:en":["hope_programming_language"],"ns:common.topic.article":[{"ns:common.document.text":["Hope is a small functional programming language developed in the 1970s at Edinburgh University. It predates Miranda and Haskell and is contemporaneous with ML (also developed at Edinburgh). It is notable for being the first language with call-by-pattern evaluation and algebraic data types. Hope is an important language in the development of functional programming.\\nThe name may have been derived from Hope Park Square in Edinburgh, at one time the location of the Department of Artificial Intelligence.\\nA Hope tutorial by Roger Bailey was featured in the August 1985 issue of Byte on declarative programming.\\nA factorial program in Hope is\\nUnlike in Haskell, changing the order of the clauses would not change the meaning of the program, because Hope's pattern matching always favors more specific patterns over less specific ones.\\nAnother way in which Hope differs from Haskell and ML is that explicit type declarations in Hope are required: there is no option to use a type-inference algorithm in Hope.\\nThe first implementation of Hope was strict, but since that one there have been lazy versions and strict versions with lazy constructors (the language described in  has a lazy constructor for"],"ns:common.document.source_uri":["<http://wp/en/933188>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["Hope"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1259wzjyg"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"],"ns:computer.programming_language.influenced":["ns:m.0pkgc"]}}