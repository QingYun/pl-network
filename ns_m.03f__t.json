{"ns:m.03f__t":{"ns:common.topic.description":["JScript .NET is a .NET programming language developed by Microsoft.\\nThe primary differences between JScript and JScript .NET can be summarized as follows:\\nFirstly, JScript is a scripting language, and as such programs can be executed without the need to compile the code first. This is not the case with the JScript .NET command-line compiler, since this next-generation version relies on the .NET Common Language Runtime for execution, which requires that the code be compiled to Common Intermediate Language, formerly called Microsoft Intermediate Language, code before it can be run. Nevertheless, JScript .NET still provides full support for interpreting code at runtime and indeed the interpreter can be exposed by custom applications hosting the JScript .NET engine via the VSA interfaces.\\nSecondly, JScript has a strong foundation in Microsoft's ActiveX/COM technologies, and relies primarily on ActiveX components to provide much of its functionality, whereas JScript .NET uses the .NET Framework to provide equivalent functionality. For backwards-compatibility, JScript .NET still provides full access to ActiveX objects via ."],"rdfs:label":["JScript .NET"],"key:en":["jscript_net"],"ns:common.topic.article":[{"ns:common.document.text":["JScript .NET is a .NET programming language developed by Microsoft as a natural successor to the Active Scripting language JScript, Microsoft's implementation of edition 3 of the ECMAScript standard. Their implementation of edition 5 in the Windows 8 Consumer Preview is called JavaScript. [sic] \\nThe primary differences between JScript and JScript .NET can be summarized as follows:\\nFirstly, JScript is a scripting language, and as such programs (or more suggestively, scripts) can be executed without the need to compile the code first. This is not the case with the JScript .NET command-line compiler, since this next-generation version relies on the .NET Common Language Runtime (CLR) for execution, which requires that the code be compiled to Common Intermediate Language (CIL), formerly called Microsoft Intermediate Language (MSIL), code before it can be run. Nevertheless, JScript .NET still provides full support for interpreting code at runtime (e.g., via the Function constructor or the eval function) and indeed the interpreter can be exposed by custom applications hosting the JScript .NET engine via the VSA interfaces.\\nSecondly, JScript has a strong foundation in Microsoft's"],"ns:common.document.source_uri":["<http://wp/en/840451>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["JScript .NET"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1255j18vr"],"ns:computer.programming_language.influenced_by":["ns:m.02p97"],"ns:computer.programming_language.parent_language":["ns:m.02p97"],"ns:computer.programming_language.language_paradigms":["ns:m.01h1_2"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}