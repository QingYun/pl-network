{"ns:m.015hl_":{"ns:common.topic.description":["ACL2 is a software system consisting of a programming language, an extensible theory in a first-order logic, and a mechanical theorem prover. ACL2 is designed to support automated reasoning in inductive logical theories, mostly for the purpose of software and hardware verification. The input language and implementation of ACL2 are built on Common Lisp. ACL2 is free, open source software.\\nThe ACL2 programming language is an applicative variant of Common Lisp. ACL2 is untyped. All ACL2 functions are total — that is, every function maps each object in the ACL2 universe to another object in its universe.\\nACL2's base theory axiomatizes the semantics of its programming language and its built-in functions. User definitions in the programming language that satisfy a definitional principle extend the theory in a way that maintains the theory's logical consistency.\\nThe core of ACL2's theorem prover is based on term rewriting, and this core is extensible in that user-discovered theorems can be used as ad-hoc proof techniques for subsequent conjectures.\\nACL2 is intended to be an \\\"industrial strength\\\" version of the Boyer–Moore theorem prover, NQTHM."],"rdfs:label":["ACL2"],"key:en":["acl2_theorem_prover"],"ns:common.topic.official_website":["<http://www.cs.utexas.edu/users/moore/acl2/>"],"ns:common.topic.article":[{"ns:common.document.text":["ACL2 (A Computational Logic for Applicative Common Lisp) is a software system consisting of a programming language, an extensible theory in a first-order logic, and a mechanical theorem prover. ACL2 is designed to support automated reasoning in inductive logical theories, mostly for the purpose of software and hardware verification. The input language and implementation of ACL2 are built on Common Lisp. ACL2 is free, open source (GPL) software.\\nThe ACL2 programming language is an applicative (side-effect free) variant of Common Lisp. ACL2 is untyped. All ACL2 functions are total — that is, every function maps each object in the ACL2 universe to another object in its universe.\\nACL2's base theory axiomatizes the semantics of its programming language and its built-in functions. User definitions in the programming language that satisfy a definitional principle extend the theory in a way that maintains the theory's logical consistency.\\nThe core of ACL2's theorem prover is based on term rewriting, and this core is extensible in that user-discovered theorems can be used as ad-hoc proof techniques for subsequent conjectures.\\nACL2 is intended to be an \\\"industrial strength\\\" version of the"],"ns:common.document.source_uri":["<http://wp/en/162049>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.developers":["J Strother Moore"],"ns:computer.programming_language.language_designers":["J Strother Moore"],"ns:common.topic.subject_of":["Computer-aided reasoning"],"ns:type.object.name":["ACL2"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.11b7kf3303"],"ns:computer.programming_language.influenced_by":["ns:m.027kv60"],"ns:computer.programming_language.parent_language":["ns:m.01tlw"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.03wxyk"]}}