{"ns:m.0428xx":{"ns:common.topic.description":["Unified Parallel C is an extension of the C programming language designed for high-performance computing on large-scale parallel machines, including those with a common global address space and those with distributed memory. The programmer is presented with a single shared, partitioned address space, where variables may be directly read and written by any processor, but each variable is physically associated with a single processor. UPC uses a Single Program Multiple Data model of computation in which the amount of parallelism is fixed at program startup time, typically with a single thread of execution per processor.\\nIn order to express parallelism, UPC extends ISO C 99 with the following constructs:\\nAn explicitly parallel execution model\\nA shared address space\\nSynchronization primitives and a memory consistency model\\nExplicit communication primitives, e.g. upc_memput\\nMemory management primitives\\nThe UPC language evolved from experiences with three other earlier languages that proposed parallel extensions to ISO C 99: AC, Split-C, and Parallel C Preprocessor. UPC is not a superset of these three languages, but rather an attempt to distill the best characteristics of each."],"rdfs:label":["Unified Parallel C"],"key:en":["unified_parallel_c"],"ns:common.topic.official_website":["<http://upc.gwu.edu/>"],"ns:common.topic.article":[{"ns:common.document.text":["Unified Parallel C (UPC) is an extension of the C programming language designed for high-performance computing on large-scale parallel machines, including those with a common global address space (SMP and NUMA) and those with distributed memory (e.g. clusters). The programmer is presented with a single shared, partitioned address space, where variables may be directly read and written by any processor, but each variable is physically associated with a single processor. UPC uses a Single Program Multiple Data (SPMD) model of computation in which the amount of parallelism is fixed at program startup time, typically with a single thread of execution per processor.\\nIn order to express parallelism, UPC extends ISO C 99 with the following constructs:\\nThe UPC language evolved from experiences with three other earlier languages that proposed parallel extensions to ISO C 99: AC, Split-C, and Parallel C Preprocessor (PCP). UPC is not a superset of these three languages, but rather an attempt to distill the best characteristics of each. UPC combines the programmability advantages of the shared memory programming paradigm and the control over data layout and performance of the message passing"],"ns:common.document.source_uri":["<http://wp/en/1057616>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bjzfrj"],"ns:common.webpage.uri":["<http://upc.gwu.edu/>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.0428xx"]}],"ns:type.object.name":["Unified Parallel C"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1255x3p12"],"ns:computer.programming_language.language_paradigms":["ns:m.06w_b"],"ns:computer.programming_language.influenced_by":["ns:m.0dndhc"],"ns:computer.programming_language.parent_language":["ns:m.01t6b"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced":["ns:m.042vgj"]}}