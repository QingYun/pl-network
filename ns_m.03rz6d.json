{"ns:m.03rz6d":{"ns:common.topic.description":["MultiLisp was a functional programming language and dialect of Scheme, extended with constructs for parallel execution and shared memory. These extensions involve side effects, rendering MultiLisp non-deterministic. In addition to its parallel-programming extensions, MultiLisp also had some unusual garbage collection and task scheduling algorithms. Like Scheme, MultiLisp was oriented toward symbolic computation. Unlike some parallel programming languages, MultiLisp incorporated constructs for causing side effects and for explicitly introducing parallelism.\\nIt was designed by Robert H. Halstead in the early 1980s for use on the 32-processor Concert multiprocessor being developed at MIT and implemented in Interlisp. It has influenced the development of the Scheme dialect Gambit, and Interlisp-VAX."],"rdfs:label":["MultiLisp"],"key:en":["multilisp"],"ns:common.topic.article":[{"ns:common.document.text":["MultiLisp is a functional programming language and dialect of the Lisp dialect Scheme, extended with constructs for parallel execution and shared memory; MultiLisp is implemented in Interlisp. These extensions involve side effects, rendering MultiLisp non-deterministic. In addition to its parallel-programming extensions, MultiLisp also had some unusual garbage collection and task scheduling algorithms. Like Scheme, MultiLisp is oriented toward symbolic computation. Unlike some parallel programming languages, MultiLisp incorporates constructs for causing side effects and for explicitly introducing parallelism. It was designed by Robert H. Halstead in the early 1980s for use on the 32-processor Concert multiprocessor being developed at MIT. It has influenced the development of the Scheme dialect Gambit , and Interlisp-VAX.\\nMultiLisp achieves parallelism with the PCALL macro, where\\n(PCALL Fun A B C ...)\\nis equivalent to\\n(Fun A B C ...)\\nexcept that the arguments A, B, C, etc. are explicitly allowed to be evaluated in parallel; this circumvents the usual order of evaluation, which is sequential and left to right. It also makes use of a parallel programming construct called futures,"],"ns:common.document.source_uri":["<http://wp/en/940605>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["MultiLisp"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125bpms50"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"]}}