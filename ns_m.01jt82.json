{"ns:m.01jt82":{"ns:common.topic.alias":["F sharp"],"ns:common.topic.description":["F# is a strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming techniques. F# is most often used as a cross-platform CLI language, but can also be used to generate JavaScript and GPU code.\\nF# is developed by the F# Software Foundation, Microsoft and open contributors. An open source, cross-platform compiler for F# is available from the F# Software Foundation. F# is also a fully supported language in Visual Studio and Xamarin Studio. Other tools supporting F# development include Mono, MonoDevelop, SharpDevelop and WebSharper.\\nF# originated from ML and has been influenced by OCaml, C#, Python, Haskell, Scala and Erlang."],"rdfs:label":["F#"],"key:en":["f_sharp_programming_language"],"ns:common.topic.official_website":["<http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/>"],"ns:common.topic.topical_webpage":["<http://research.microsoft.com/fsharp/fsharp.aspx>"],"ns:common.topic.article":[{"ns:common.document.text":["F# (pronounced F Sharp) is a multi-paradigm programming language, targeting the .NET Framework, that encompasses functional programming as well as imperative and object-oriented programming disciplines. It is a variant of ML and is largely compatible with the OCaml implementation. F# was initially developed by Don Syme at Microsoft Research but is now being developed at Microsoft Developer Division and is being distributed as a fully supported language in the .NET Framework and Visual Studio as part of Visual Studio 2010.\\nF# is a strongly typed language that uses type inference. As a result, data types do not need to be explicitly declared by the programmer; they will be deduced by the compiler during compilation. However, F# also allows explicit data type declaration. Being a CLI compliant language, F# supports all CLI types and objects but it extends the type system and categorizes types as immutable types or mutable types. CLI objects classify as mutable types (which can be edited in-place), and are used to provide an object-oriented programming model. Immutable types (editing such a type creates a new instance without overwriting the older one) are primarily used for functional"],"ns:common.document.source_uri":["<http://wp/en/239964>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.description":["FSharp Home Page"],"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0blv8wx"],"ns:common.webpage.uri":["<http://msdn.microsoft.com/en-us/vstudio/hh388569>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.01jt82"]}],"ns:computer.programming_language.language_designers":["Don Syme"],"ns:computer.programming_language.introduced":["2002"],"ns:type.object.name":["F#"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125c8cn0c"],"ns:computer.programming_language.language_paradigms":["ns:m.07phw8"],"ns:computer.programming_language.influenced":["ns:m.0ql079r"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.091hdj"],"ns:computer.programming_language.parent_language":["ns:m.055mc"]}}