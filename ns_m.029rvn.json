{"ns:m.029rvn":{"ns:common.topic.description":["Oberon-2 is an extension of the original Oberon programming language that adds limited reflection and object-oriented programming facilities, open arrays as pointer base types, read-only field export and reintroduces the FOR loop from Modula-2.\\nIt was developed in 1991 at ETH Zurich by Niklaus Wirth and Hanspeter Mössenböck, who is now at Institut für Systemsoftware of the University of Linz, Austria. Oberon-2 is a superset of Oberon, and is fully compatible with it. Oberon-2 was a redesign of Object Oberon.\\nOberon-2 inherited limited reflection and single inheritance without interfaces or mixins from Oberon, but added efficient virtual methods. Method calls were resolved at run-time using C++-style virtual method tables.\\nCompared to fully object-oriented programming languages like Smalltalk, in Oberon-2 basic types are not objects, classes are not objects, many operations are not methods, there is no message passing, and polymorphism is limited to subclasses of a common class. Oberon-2 does not support encapsulation at object/class level, but modules can be used for this purpose."],"rdfs:label":["Oberon-2"],"key:en":["oberon-2"],"ns:common.topic.article":[{"ns:common.document.text":["Oberon-2 is an extension of the original Oberon programming language that adds limited reflection and object-oriented programming facilities, open arrays as pointer base types, read-only field export and reintroduces the FOR loop from Modula-2.\\nIt was developed in 1991 at ETH Zurich by Niklaus Wirth and Hanspeter Mössenböck, who is now at Institut für Systemsoftware (SSW) of the University of Linz, Austria. Oberon-2 is a superset of Oberon, and is fully compatible with it. Oberon-2 was a redesign of Object Oberon.\\nOberon-2 inherited limited reflection and single inheritance (\\\"type extension\\\") without interfaces or mixins from Oberon, but added efficient virtual methods (\\\"type bound procedures\\\"). Method calls were resolved at run-time using C++-style virtual method tables.\\nCompared to fully object-oriented programming languages like Smalltalk, in Oberon-2 basic types are not objects, classes are not objects, many operations are not methods, there is no message passing (to a certain extent it can be emulated by reflection and through message extension, as demonstrated in ETH Oberon), and polymorphism is limited to subclasses of a common class (no duck typing like in Smalltalk/Ruby,"],"ns:common.document.source_uri":["<http://wp/en/449019>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.language_designers":["Niklaus Wirth"],"ns:computer.programming_language.introduced":["1991"],"ns:type.object.name":["Oberon-2"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.12559bd2l"],"ns:computer.programming_language.influenced":["ns:m.01_1zc"],"ns:computer.programming_language.language_paradigms":["ns:m.06w_b"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.0kzb_"]}}