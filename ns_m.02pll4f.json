{"ns:m.02pll4f":{"rdfs:label":["PROGOL"],"ns:common.topic.description":["Progol is Stephen Muggleton's implementation of Inductive Logic Programming used in computer science that combines \\\"Inverse Entailment\\\" with \\\"general-to-specific search\\\" through a refinement graph. \\\"Inverse Entailment\\\" is used with mode declarations to derive the most-specific clause within the mode language which entails a given example. This clause is used to guide a refinement-graph search.\\nUnlike the searches of Ehud Shapiro's Model Inference System and J. Ross Quinlan's FOIL Progol's search is efficient and has a provable guarantee of returning a solution having the maximum \\\"compression\\\" in the search-space. To do so it performs an admissible A*-like search, guided by compression, over clauses which subsume the most specific clause.\\nProgol deals with noisy data by using the \\\"compression measure\\\" to trade-off the description of errors against the hypothesis description length. Progol allows arbitrary Prolog programs as background knowledge and arbitrary definite clauses as examples. Despite this bench-tests show that the efficiency of Progol compares favourably with FOIL."],"key:en":["progol"],"ns:common.topic.article":[{"ns:common.document.text":["Progol is an implementation of Inductive Logic Programming used in computer science that combines \\\"Inverse Entailment\\\" with \\\"general-to-specific search\\\" through a refinement graph.  \\\"Inverse Entailment\\\" is used with mode declarations to derive the most-specific clause within the mode language which entails a given example. This clause is used to guide a refinement-graph search.\\nUnlike the searches of Ehud Shapiro's Model Inference System (MIS) and J. Ross Quinlan's FOIL Progol's search is efficient and has a provable guarantee of returning a solution having the maximum \\\"compression\\\" in the search-space. To do so it performs an admissible A*-like search, guided by compression, over clauses which subsume the most specific clause.\\nProgol deals with noisy data by using the \\\"compression measure\\\" to trade-off the description of errors against the hypothesis description length. Progol allows arbitrary Prolog programs as background knowledge and arbitrary definite clauses as examples. Despite this bench-tests show that the efficiency of Progol compares favourably with FOIL."],"ns:common.document.source_uri":["<http://wp/en/9605764>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["PROGOL"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1259rk5g0"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}