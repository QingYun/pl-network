{"ns:m.06j4lb":{"ns:common.topic.description":["Twelf is an implementation of the logical framework LF. It is used for logic programming and for the formalization of programming language theory."],"rdfs:label":["Twelf"],"key:en":["twelf"],"ns:common.topic.article":[{"ns:common.document.text":["Twelf is an implementation of the logical framework LF. It is used for logic programming and for the formalization of programming language theory.\\nAt its simplest, a Twelf program (called a \\\"signature\\\") is a collection of declarations of type families and constants that inhabit those type families. For example, the following is the standard definition of the natural numbers, with z standing for zero and s the successor operator.\\nHere nat is a type, and z and s are constant terms. As a dependently-typed system, types can be indexed by terms, which allows the definition of more interesting type families (relations). Here is a definition of addition:\\nThe type family plus is read as a relation between three natural numbers M, N and P, such that M + N = P. We then give the constants that define the relation: plus_zero indicates that any natural number M plus zero is still M. The quantifier {M:nat} can be read as \\\"for all M of type nat\\\".\\nThe constant plus_succ defines the case for when the second argument is the successor of some other number N (see pattern matching). The result is the successor of P, where P is the sum of M and N. This recursive call is made via the subgoal plus M N P,"],"ns:common.document.source_uri":["<http://wp/en/2058228>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["Twelf"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1255jj2nk"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}