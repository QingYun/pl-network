{"ns:m.0c1r9r":{"ns:common.topic.description":["Agda is a dependently typed functional programming language originally developed by Ulf Norell at Chalmers University of Technology with implementation described in his PhD thesis. The current version of Agda was originally known as Agda 2. The original Agda system was developed at Chalmers by Catarina Coquand in 1999. The current version is a complete rewrite, which should be considered a new language that shares a name and tradition.\\nAgda, unlike Coq, has no support for tactics, and proofs are written in a functional programming style. The language has ordinary programming constructs such as data types, pattern matching, records, let expressions and modules, and a Haskell-like syntax. The system has an Emacs interface but can also be run in batch mode from the command line.\\nAgda is based on Zhaohui Luo's UTT a type theory similar to Martin-Löf type theory."],"rdfs:label":["Agda"],"key:en":["agda_theorem_prover"],"ns:common.topic.official_website":["<http://wiki.portal.chalmers.se/agda/>"],"ns:base.schemastaging.context_name.pronunciation":[{"ns:base.schemastaging.pronunciation.yomigana":["アグダ"],"rdf:type":["ns:base.schemastaging.pronunciation"]}],"ns:common.topic.image":[{"ns:type.content.length":["568619"],"rdfs:label":["Agda proof"],"ns:common.image.rights_holder_text_attribution":["Attributed to wikipedia user Nattfodd"],"ns:type.content.blob_id":["c16984028f6d6e23ce5bb555c0c4f0b2d115a57786ef589e7828dd90c50dbf13"],"ns:common.licensed_object.license":["ns:m.03mtv8h"],"ns:common.image.size":["ns:m.041s24v"],"ns:type.content.source":["ns:m.041s25v"],"ns:type.content.media_type":["ns:m.08x8"],"ns:type.object.name":["Agda proof"],"rdf:type":["ns:type.content"],"ns:common.image.appears_in_topic_gallery":["ns:m.0c1r9r"]}],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0blyb46"],"ns:common.webpage.uri":["<http://wiki.portal.chalmers.se/agda/>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.0c1r9r"]}],"ns:computer.programming_language.language_designers":["Ulf Norell"],"ns:common.topic.article":[{"ns:common.document.text":["Agda is a proof assistant, i.e. a computer program that can check mathematical proofs. More specifically, it is an interactive system for developing constructive proofs based on the Curry-Howard correspondence in a variant of Per Martin-Löf's Type Theory. It can also be seen as a functional programming language with dependent types. Agda was developed by Ulf Norell, a postdoctoral researcher at Chalmers University of Technology.\\nAgda is based on the idea of direct manipulation of proof-term and not on tactics. The proof is a term, not a script. The language has ordinary programming constructs such as data-types and case-expressions, signatures and records, let-expressions and modules. The system has an Emacs interface and a graphical interface, Alfa.\\nAs a programming language, Agda has Haskell-like syntax, and the Agda 2 compiler can convert Agda proofs into functions in the Haskell, JavaScript, or Epic languages.\\nThe current version of Agda, Agda 2, has been developed at Chalmers by Ulf Norell. The syntax has changed from Agda 1 (though some conversion tools are being developed as well), introducing for instance, implicit variables that can be omitted when deducible from the"],"ns:common.document.source_uri":["<http://wp/en/4426773>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["2007"],"ns:type.object.name":["Agda"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125dm802p"],"ns:computer.programming_language.language_paradigms":["ns:m.06891z"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.0674cj"],"ns:computer.programming_language.parent_language":["ns:m.03j_q"],"ns:computer.programming_language.influenced":["ns:m.0swpzmh"]}}