{"ns:m.0gh50t7":{"ns:common.topic.alias":["The Alpoca Language"],"ns:common.topic.description":["Alpoca is a programming language based on atypical conventions created by Ryan Baylor Killea in 2011. There is no compiler released to the public as of yet, however there is one in the making. Alpoca is strictly indented, this is intended to remedy nitpicking. Manipulation of a single Boolean value is separated from arithmetic manipulation allowing a more unified symbol base. All composite types employ encapsulation. All accessors cannot change the state in a program, and therefore are the only way to use composite types in conditional expressions. Default mutators are specified for any set of types on which there exists a mutator. This is useful when no mutator is \\\"forced\\\" in the usual way by calling it explicitly. Calling functions with multiple arguments is done in a highly indented style emphasizing readability over compactness. There is an enforced line length of 80 characters per line. There is no \\\"standard library\\\", and no input or output functions are included with the language. Instead, full control over pointers is given to the user. This could seem unsafe, however the operator of such pointers is assumed to be able to diligently manage whatever problems may occur."],"rdfs:label":["Alpoca"],"ns:user.ngerakines.social_software.github_user.username":["lefthandman"],"ns:common.topic.article":[{"ns:common.document.updated":["\"2011-03-20T19:57:55.792435Z\"^^<http://www.w3.org/2001/XMLSchema#dateTime>"],"ns:common.document.content":["ns:m.0gh52s7"],"ns:common.document.text":["Alpoca is a programming language based on atypical conventions created by Ryan Baylor Killea in 2011. There is no compiler released to the public as of yet, however there is one in the making. Alpoca is strictly indented, this is intended to remedy nitpicking. Manipulation of a single Boolean value is separated from arithmetic manipulation allowing a more unified symbol base. All composite types employ encapsulation. All accessors cannot change the state in a program, and therefore are the only way to use composite types in conditional expressions. Default mutators are specified for any set of types on which there exists a mutator. This is useful when no mutator is \\\"forced\\\" in the usual way by calling it explicitly. Calling functions with multiple arguments is done in a highly indented style emphasizing readability over compactness. There is an enforced line length of 80 characters per line. There is no \\\"standard library\\\", and no input or output functions are included with the language. Instead, full control over pointers is given to the user. This could seem unsafe, however the operator of such pointers is assumed to be able to diligently manage whatever problems may occur."],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["2011"],"ns:type.object.name":["Alpoca"],"rdf:type":["ns:user.ngerakines.social_software.github_user"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1259m9wtp"],"ns:computer.programming_language.language_paradigms":["ns:m.07kg1sq"],"ns:computer.programming_language.influenced_by":["ns:m.0jgqg"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}