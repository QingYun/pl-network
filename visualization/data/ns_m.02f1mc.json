{"ns:m.02f1mc":{"ns:common.topic.description":["OPS5 is a rule-based or production system computer language, notable as the first such language to be used in a successful expert system, the R1/XCON system used to configure VAX computers.\\nThe OPS family was developed in the late 1970s by Charles Forgy while at Carnegie Mellon University. Allen Newell's research group in artificial intelligence had been working on production systems for some time, but Forgy's implementation, based on his Rete algorithm, was especially efficient, sufficiently so that it was possible to scale up to larger problems involving hundreds or thousands of rules.\\nOPS5 uses a forward chaining inference engine; programs execute by scanning \\\"working memory elements\\\" looking for matches with the rules in \\\"production memory\\\". Rules have actions that may modify or remove the matched element, create new ones, perform side effects such as output, and so forth. Execution continues until no more matches can be found.\\nIn this sense, OPS5 is an execution engine for a Petri net extended with inhibitor arcs.\\nThe OPS5 forward chaining process makes it extremely parallelizeable during the matching phase, and several automatic parallelizing compilers were created."],"rdfs:label":["OPS5"],"key:en":["ops5"],"ns:common.topic.article":[{"ns:common.document.text":["OPS5 is a rule-based or production system computer language, notable as the first such language to be used in a successful expert system, the R1/XCON system used to configure VAX computers.\\nThe OPS (said to be short for \\\"Official Production System\\\") family was developed in the late 1970s by Charles Forgy while at Carnegie Mellon University. Allen Newell's research group in artificial intelligence had been working on production systems for some time, but Forgy's implementation, based on his Rete algorithm, was especially efficient, sufficiently so that it was possible to scale up to larger problems involving hundreds or thousands of rules.\\nOPS5 uses a forward chaining inference engine; programs execute by scanning \\\"working memory elements\\\" (which are vaguely object-like, with classes and attributes) looking for matches with the rules in \\\"production memory\\\". Rules have actions that may modify or remove the matched element, create new ones, perform side effects such as output, and so forth. Execution continues until no more matches can be found.\\nOPS4 was an early version, while OPS83 came later.\\nThe first implementation of OPS5 was written in Lisp, and later rewritten in BLISS for"],"ns:common.document.source_uri":["<http://wp/en/475829>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["OPS5"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1255wtj6g"],"ns:computer.programming_language.influenced":["ns:m.03r1wd"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.04kyw"]}}