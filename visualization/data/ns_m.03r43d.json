{"ns:m.03r43d":{"ns:common.topic.description":["MLISP is a variant of Lisp with an Algol-like syntax based on M-Expressions, which were the function syntax in the original description of Lisp by John McCarthy. McCarthy's M-expressions were never implemented.\\nMLISP was first implemented for the IBM 360 by Horace Enea and then reimplemented for the PDP 10 by David Canfield Smith. This second implementation also supported a special kind of lambdas, which do not evaluate their arguments . As in Lisp-1 or Scheme, there was a single namespace for variables and functions.\\nWhile MLISP was just a preprocessor with an alternative, more reader-friendly syntax for Lisp, the descendant MLISP 2 introduced new concepts:\\ninteractive interpretation of programs instead of compilation\\nextensibility with a syntax description language\\npattern matching\\nbacktracking by the use of closures on a stack and indices for continuations\\nMLISP2 was called a transitional language by the authors. Larry Tesler improved the pattern matching system to implement a successor language called LISP70, which was only completed to a preliminary version. Though this path of LISP evolution is widely neglected, it resembles some features, later found in ML or Scheme."],"rdfs:label":["MLisp"],"key:en":["mlisp"],"ns:common.topic.article":[{"ns:common.document.text":["MLISP is a variant of Lisp with an Algol-like syntax based on M-Expressions, which were the function syntax in the original description of Lisp by John McCarthy. McCarthy's M-expressions were never implemented.\\nMLISP was first implemented for the IBM 360 by Horace Enea and then reimplemented for the PDP 10 by David Canfield Smith. This second implementation also supported a special kind of lambdas (\\\"FEXPR\\\"), which do not evaluate their arguments . As in Lisp-1 or Scheme, there was a single namespace for variables and functions.\\nWhile MLISP was just a preprocessor with an alternative, more reader-friendly syntax for Lisp, the descendant MLISP 2 introduced new concepts:\\nMLISP2 was called a transitional language by the authors. Larry Tesler improved the pattern matching system to implement a successor language called LISP70, which was only completed to a preliminary version. Though this path of LISP evolution is widely neglected, it resembles some features, later found in ML or Scheme.\\nM-LISP is a second branch — independent from the MLISP approach — and, as described by the author, essentially a hybrid of M-expression LISP and Scheme."],"ns:common.document.source_uri":["<http://wp/en/931657>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["MLisp"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125fhsxcx"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.02nz9y"],"ns:computer.programming_language.influenced":["ns:m.03crjgp"]}}