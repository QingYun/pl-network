{"ns:m.076kx1":{"ns:common.topic.description":["Caml is a dialect of the ML programming language family, developed at INRIA and formerly at ENS.\\nLike many descendants of ML, Caml is statically typed, strictly evaluated, and uses automatic memory management.\\nThe first Caml implementation in Lisp was nicknamed \\\"Heavy CAML\\\" because of its memory and CPU requirements relative to its successor Caml Light that was implemented in C by Xavier Leroy and Damien Doligez. In addition to a complete rewriting, CAML Special Light added a powerful module system to the core language.\\nCurrently, the main implementation of Caml is OCaml, which adds many new features to the language including an object layer."],"rdfs:label":["Caml"],"key:en":["caml"],"ns:common.topic.official_website":["<http://caml.inria.fr/>"],"ns:common.topic.webpage":[{"ns:common.webpage.uri":["<http://caml.inria.fr>"],"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bjgkz2"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.076kx1"]}],"ns:computer.programming_language.language_designers":["Xavier Leroy"],"ns:common.topic.article":[{"ns:common.document.text":["Caml (originally an acronym for Categorical Abstract Machine Language) is a dialect of the ML programming language family, developed at INRIA and formerly at ENS.\\nLike many descendants of ML, Caml is statically typed, strictly evaluated, and uses automatic memory management.\\nThe first Caml implementation in Lisp was nicknamed \\\"Heavy CAML\\\" because of its memory and CPU requirements relative to its successor Caml Light that was implemented in C by Xavier Leroy and Damien Doligez. In addition to a complete rewriting, CAML Special Light added a powerful (applicative) module system to the core language.\\nCurrently, the main implementation of Caml is OCaml, which adds many new features to the language including an object layer.\\nIn the following, # represents the OCaml prompt.\\nMany mathematical functions, such as factorial, are most naturally represented in a purely functional form. The following recursive, purely functional Caml function implements factorial:\\nThe function can be written equivalently using pattern matching:\\nThis latter form is the mathematical definition of factorial as a recurrence relation.\\nNote that the compiler inferred the type of this function to be int -> int,"],"ns:common.document.source_uri":["<http://wp/en/2362118>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["1985"],"ns:type.object.name":["Caml"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1256v08_2"],"ns:computer.programming_language.language_paradigms":["ns:m.05prj"],"ns:computer.programming_language.influenced":["ns:m.01jt82"],"ns:computer.programming_language.influenced_by":["ns:m.055mc"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.dialects":["ns:m.0b79zw"]}}