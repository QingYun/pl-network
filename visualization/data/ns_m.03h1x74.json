{"ns:m.03h1x74":{"ns:common.topic.description":["Refal \\\"is a functional programming language oriented toward symbol manipulation\\\", including \\\"string processing, translation, [and] artificial intelligence\\\". It is one of the oldest members of this family, first conceived in 1966 as a theoretical tool with the first implementation appearing in 1968. Refal was intended to combine mathematical simplicity with practicality for writing large and sophisticated programs.\\nUnlike Lisp, Refal is based on pattern matching. Its pattern matching works in the forward direction rather than backwards as in Prolog.\\nVery important is the difference between data structures and their use in Refal and most other high-level languages. The basic data structure of Lisp and Prolog is a linear list consed up from the beginning. Refal lists are built and scanned from both ends, and pattern matching allows to match against nested lists as well as the top-level one.. According to the authors, this gives freedom and convenience in creating data structures while using only mathematically simple control mechanisms of pattern matching and substitution."],"rdfs:label":["Refal"],"ns:common.topic.official_website":["<http://www.refal.net/>"],"ns:base.schemastaging.context_name.pronunciation":[{"ns:base.schemastaging.pronunciation.yomigana":["レファル"],"rdf:type":["ns:base.schemastaging.pronunciation"]}],"ns:common.topic.article":[{"ns:common.document.text":["Refal (Recursive functions algorithmic language) \\\"is a functional programming language oriented toward symbol manipulation\\\", including \\\"string processing, translation, [and] artificial intelligence\\\". It is one of the oldest members of this family, first conceived in 1966 as a theoretical tool with the first implementation appearing in 1968. Refal combines mathematical simplicity with practicality for writing large and sophisticated programs.\\nUnlike Lisp, Refal is based on pattern matching. Compared to Prolog, Refal is conceptually simpler. Its pattern matching works in the forward direction rather than backwards (starting from the goal) as in Prolog. This is a more natural approach to writing algorithms which also makes them easier to test and debug.\\nVery important is the difference between data structures and their use in Refal and most other high-level languages. The basic data structure of Lisp and Prolog is a linear list consed up from the beginning. Refal lists are built and scanned from both ends, and pattern matching allows to match against nested lists as well as the top-level one. (In effect, the basic data structure of Refal is a tree rather than a list). This gives"],"ns:common.document.source_uri":["<http://wp/en/14926151>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.uri":["<http://www.refal.net>"],"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bkjs_5"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.03h1x74"]}],"ns:type.object.name":["Refal"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125fwcp7n"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"]}}