{"ns:m.02h31b":{"ns:common.topic.description":["Nemerle is a general-purpose high-level statically typed programming language designed for platforms using the Common Language Infrastructure. It offers functional, object-oriented and imperative features. It has a simple C#-like syntax and a powerful metaprogramming system. In June 2012, the core developers of Nemerle were hired by the Czech software development company JetBrains. The team is focusing on the development of Nitra; a framework for implementing new and existing programming languages. This framework will likely be used to create future versions of Nemerle.\\nThe language was named after the Archmage Nemmerle, a character in the fantasy novel A Wizard of Earthsea by Ursula K. Le Guin."],"rdfs:label":["Nemerle"],"key:en":["nemerle"],"ns:common.topic.official_website":["<http://www.nemerle.org>"],"ns:computer.programming_language.language_designers":["Paweł Olszta"],"ns:base.schemastaging.context_name.pronunciation":[{"ns:base.schemastaging.pronunciation.yomigana":["ネマール"],"rdf:type":["ns:base.schemastaging.pronunciation"]}],"ns:common.topic.article":[{"ns:common.document.text":["Nemerle is a general-purpose high-level statically typed programming language for the .NET (see also Mono) platform. It offers functional, object-oriented and imperative features. It has a simple C#-like syntax and a powerful metaprogramming system.\\nIt has been named after the Archmage Nemmerle, a character in the fantasy novel A Wizard of Earthsea by Ursula K. Le Guin (spelling with a single m is a design decision).\\nThe most important feature of Nemerle is the ability to mix object oriented and functional programming styles. The top-level program structure is object oriented, while in the body of methods one can (but is not forced to) use functional style. Nemerle key features are:\\nThe metaprogramming system allows great compiler extensibility, embedding domain specific languages, partial evaluation and aspect-oriented programming, taking a high-level approach to lift as much of the burden from the programmer as possible. The language combines all CLI standard features, including parameter polymorphism, lambdas, extension methods etc. The usage of more mundane library functionality from .NET and Mono is as easy as in C#.\\nVariants (called data types or sum types in SML and OCaml)"],"ns:common.document.source_uri":["<http://wp/en/30883042>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.uri":["<http://nemerle.org>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.02h31b"]}],"ns:computer.programming_language.introduced":["2003"],"ns:type.object.name":["Nemerle"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125cdn_m_"],"ns:computer.programming_language.language_paradigms":["ns:m.05prj"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.07657k"]}}