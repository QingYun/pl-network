{"ns:m.05b9cr":{"ns:common.topic.description":["Transaction Application Language or TAL is a block-structured, procedural language optimized for use on Tandem hardware. TAL resembles a cross between C and Pascal. It was the original system programming language for the Tandem CISC machines, which had no assembler.\\nThe design concept of TAL, an evolution of Hewlett Packard's SPL, was intimately associated and optimized with a microprogrammed CISC instruction set. Each TAL statement could easily compile into a sequence of instructions that manipulated data on a transient floating register stack. The register stack itself floated at the crest of the program's memory allocation and call stack.\\nThe language itself has the appearance of ALGOL or Pascal, with BEGIN and END statements. However, its semantics are far more like C. It does not permit indefinite levels of procedure nesting, it does not pass complex structured arguments by value, and it does not strictly type most variable references. Programming techniques are much like C using pointers to structures, occasional overlays, deliberate string handling and casts when appropriate.\\nAvailable datatypes include 8 bit, 16 bit, 32 bit and 64 bit integers."],"rdfs:label":["Transaction Application Language"],"key:en":["transaction_application_language"],"ns:common.topic.article":[{"ns:common.document.text":["Transaction Application Language or TAL (originally \\\"Tandem Application Language\\\") is a block-structured, procedural language optimized for use on Tandem hardware. TAL resembles a cross between C and Pascal. It was the original system programming language for the Tandem CISC machines, which had no assembler.\\nThe design concept of TAL, an evolution of Hewlett Packard's SPL, was intimately associated and optimized with a microprogrammed CISC instruction set. Each TAL statement could easily compile into a sequence of instructions that manipulated data on a transient floating register stack. The register stack itself floated at the crest of the program's memory allocation and call stack.\\nThe language itself has the appearance of ALGOL or Pascal, with BEGIN and END statements. However, its semantics are far more like C. It does not permit indefinite levels of procedure nesting, it does not pass complex structured arguments by value, and it does not strictly type most variable references. Programming techniques are much like C using pointers to structures, occasional overlays, deliberate string handling and casts when appropriate.\\nAvailable datatypes include 8 bit, 16 bit, 32 bit and"],"ns:common.document.source_uri":["<http://wp/en/1558864>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["Transaction Application Language"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125fblmzs"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}