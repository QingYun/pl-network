{"ns:m.02f70":{"ns:common.topic.alias":["Ralph"],"ns:common.topic.description":["Dylan /ˈdɪlən/ is a multi-paradigm programming language that includes support for functional and object-oriented programming, and is dynamic and reflective while providing a programming model designed to support efficient machine code generation, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by Apple Computer.\\nA concise and thorough overview of the language may be found in the Dylan Reference Manual.\\nDylan derives from Scheme and Common Lisp and adds an integrated object system derived from the Common Lisp Object System. In Dylan, all values are first-class objects. Dylan supports multiple inheritance, polymorphism, multiple dispatch, keyword arguments, object introspection, pattern-based syntax extension macros, and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development.\\nDylan's main design goal is to be a dynamic language well-suited for developing commercial software."],"rdfs:label":["Dylan"],"key:en":["dylan"],"ns:common.topic.official_website":["<http://www.opendylan.org/>"],"ns:common.topic.article":[{"ns:common.document.text":["Dylan ( /ˈdɪlən/) is a multi-paradigm programming language that includes support for functional and object-oriented programming, and is dynamic and reflective while providing a programming model designed to support efficient machine code generation, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by Apple Computer.\\nDylan derives from Scheme and Common Lisp and adds an integrated object system derived from the Common Lisp Object System (CLOS). In Dylan, all values (including numbers, characters, functions, and classes) are first-class objects. Dylan supports multiple inheritance, polymorphism, multiple dispatch, keyword arguments, object introspection, pattern-based syntax extension macros, and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development (allowing for rapid prototyping followed by incremental refinement and optimization).\\nDylan's main design goal is to be a dynamic language well-suited for developing commercial software. Dylan attempts to address"],"ns:common.document.source_uri":["<http://wp/en/8741>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0blrxlv"],"ns:common.webpage.uri":["<http://opendylan.org/>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.02f70"]}],"ns:computer.programming_language.developers":["Apple Inc."],"ns:computer.programming_language.language_designers":["Apple Inc."],"ns:computer.programming_language.introduced":["1992"],"ns:type.object.name":["Dylan"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.12578hkxw"],"ns:computer.programming_language.influenced_by":["ns:m.0q1x"],"ns:computer.programming_language.language_paradigms":["ns:m.05prj"],"ns:computer.programming_language.influenced":["ns:m.0gfwm"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}