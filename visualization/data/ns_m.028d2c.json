{"ns:m.028d2c":{"ns:common.topic.description":["BlooP and FlooP are simple programming languages designed by Douglas Hofstadter to illustrate a point in his book Gödel, Escher, Bach. BlooP is a non-Turing-complete programming language whose main control flow structure is a bounded loop. All programs in the language must terminate, and this language can only express primitive recursive functions.\\nFlooP is identical to BlooP except that it supports unbounded loops; it is a Turing-complete language and can express all computable functions. For example, it can express the Ackermann function, which cannot be written in BlooP. Borrowing from standard terminology in mathematical logic, Hofstadter calls FlooP's unbounded loops MU-loops. Like all Turing-complete programming languages, FlooP suffers from the halting problem: programs might not terminate, and it is not possible, in general, to decide which programs do.\\nBlooP and FlooP can be regarded as models of computation, and have sometimes been used in teaching computability."],"rdfs:label":["BlooP and FlooP"],"key:en":["bloop_and_floop_programming_languages"],"ns:common.topic.article":[{"ns:common.document.text":["BlooP and FlooP are simple programming languages designed by Douglas Hofstadter to illustrate a point in his book Gödel, Escher, Bach. BlooP is a non-Turing-complete programming language whose main control flow structure is a bounded loop (i.e. recursion is not permitted). All programs in the language must terminate, and this language can only express primitive recursive functions.\\nFlooP is identical to BlooP except that it supports unbounded loops; it is a Turing-complete language and can express all computable functions. For example, it can express the Ackermann function, which (not being primitive recursive) cannot be written in BlooP. Borrowing from standard terminology in mathematical logic, Hofstadter calls FlooP's unbounded loops MU-loops. Like all Turing-complete programming languages, FlooP suffers from the halting problem: programs may not terminate, and it is not possible, in general, to decide which programs do.\\nBlooP and FlooP can be regarded as models of computation, and have sometimes been used in teaching computability.\\nThe only variables are output (the return value of the procedure) and cell(i) (an unbounded sequence of natural-number variables, indexed by"],"ns:common.document.source_uri":["<http://wp/en/436718>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["BlooP and FlooP"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125cng0bp"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}