{"ns:m.01zfs7":{"ns:common.topic.description":["TRAC Language is a programming language developed in the early 1960s by Calvin Mooers. It was one of three \\\"first languages\\\" recommended by Ted Nelson in Computer Lib.\\nTRAC is a purely text-based language—a kind of macro language. Unlike traditional ad hoc macro languages of the time, such as those found in assemblers, TRAC is well planned, consistent, and in many senses complete. It has explicit input and output operators, unlike the typical implicit I/O at the outermost macro level, which makes it simultaneously simpler and more versatile than older macro languages.\\nIt also differs from traditional macro languages in that TRAC numbers are strings of digits, with integer arithmetic being provided through built-in functions. Arguably, one aspect of its completeness is that the concept of error is limited to events like lack of file space and requesting expansion of a string longer than the interpreter's working storage; what would in many languages be described as illegal operations are dealt with in TRAC by defining a result for every possible combination of a function's argument strings."],"rdfs:label":["TRAC"],"key:en":["trac_programming_language"],"ns:common.topic.article":[{"ns:common.document.text":["TRAC (for Text Reckoning And Compiling) is a programming language developed in the early 1960s by Calvin Mooers. It was one of three \\\"first languages\\\" recommended by Ted Nelson in Computer Lib.\\nTRAC is a purely text-based language—a kind of macro language. Unlike traditional ad hoc macro languages of the time, such as those found in assemblers, TRAC is well planned, consistent, and in many senses complete. It has explicit input and output operators, unlike the typical implicit I/O at the outermost macro level, which makes it simultaneously simpler and more versatile than older macro languages.\\nIt also differs from traditional macro languages in that TRAC numbers are strings of digits, with integer arithmetic (without specific limits on maximum values) being provided through built-in (\\\"primitive\\\") functions. Arguably, one aspect of its completeness is that the concept of error is limited to events like lack of file space and requesting expansion of a string longer than the interpreter's working storage; what would in many languages be described as illegal operations are dealt with in TRAC by defining a result (often a null string) for every possible combination of a function's"],"ns:common.document.source_uri":["<http://wp/en/352419>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["TRAC"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125512df8"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced":["ns:m.0pcmclv"]}}