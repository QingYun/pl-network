{"ns:m.031h11":{"ns:common.topic.description":["Lispkit Lisp is a lexically scoped, purely functional subset of Lisp developed as a testbed for functional programming concepts. It was first used for early experimentation with lazy evaluation. An SECD machine-based implementation written in an ALGOL variant was published by the developer Peter Henderson in 1980. The compiler and virtual machine are highly portable and as a result have been implemented on many machines."],"rdfs:label":["Lispkit Lisp"],"key:en":["lispkit_lisp"],"ns:common.topic.article":[{"ns:common.document.text":["Lispkit Lisp is a lexically scoped, purely functional subset of Lisp (\\\"Pure Lisp\\\") developed as a testbed for functional programming concepts. It was first used for early experimentation with lazy evaluation. An SECD machine-based implementation written in an ALGOL variant was published by the developer Peter Henderson in 1980. The compiler and virtual machine are highly portable and as a result have been implemented on many machines.\\nThe base language provides the following functions only but extensions are discussed in Henderson's book for the explicit support of lazy evaluation and non-deterministic programming.\\nThe functions, lambda, let, and letrec, are similar but have subtle differences in the way that they treat named variables which make them useful in different ways. lambda defines and returns a function, let binds expressions to variable names, and letrec is essentially similar to let except it allows for the definition of recursive functions."],"ns:common.document.source_uri":["<http://wp/en/670332>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["Lispkit Lisp"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1258h37vx"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}