{"ns:m.03j02v":{"rdfs:label":["IMP programming language"],"ns:common.topic.description":["IMP was a systems programming language developed by E. T. Irons in the late 1960s through early 1970s. Unlike most other systems programming languages, IMP was an extensible syntax programming language.\\nEven though its designer refers to the language as \\\"being based on ALGOL\\\", IMP excludes many defining features of that language, while supporting a very non-ALGOL-like one: syntax extensibility.\\nA compiler for IMP existed as early as 1965 and was used for programming the CDC 6600 time-sharing system, which was in use at the Institute for Defense Analyses since 1967. Although the compiler is slower than comparable ones for non-extensible languages, it has been used for practical production work.\\nIMP compilers were developed for the CDC-6600, Cray, PDP-10 and PDP-11 computers. Important IMP versions were IMP65, IMP70, and IMP72."],"key:en":["imp_programming_language"],"ns:common.topic.article":[{"ns:common.document.text":["This article is about Irons IMP. See also the contemporary and unrelated Edinburgh IMP programming language.\\nIMP was a systems programming language developed by E. T. Irons in the late 1960s through early 1970s. Unlike most other systems programming languages, IMP was an extensible syntax programming language.\\nEven though its designer refers to the language as \\\"being based on ALGOL\\\", IMP excludes many defining features of that language, while supporting a very non-ALGOL-like one: syntax extensibility.\\nA compiler for IMP existed as early as 1965 and was used for programming the CDC 6600 time-sharing system, which was in use at the Institute for Defense Analyses since 1967. Although the compiler is slower than comparable ones for non-extensible languages, it has been used for practical production work.\\nIMP compilers were developed for the CDC-6600, Cray, PDP-10 and PDP-11 computers. Important IMP versions were IMP65, IMP70, and IMP72.\\nBeing an extensible syntax programming language, IMP allows the programmer to extend its syntax, although no specific means are provided to add new datatypes or structures to it. To achieve its syntax-extensibility, IMP uses a powerful parse algorithm"],"ns:common.document.source_uri":["<http://wp/en/859608>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["IMP programming language"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125c54x3n"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}