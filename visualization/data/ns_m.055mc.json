{"ns:m.055mc":{"ns:common.topic.description":["ML is a general-purpose functional programming language developed by Robin Milner and others in the early 1970s at the University of Edinburgh, whose syntax is inspired by ISWIM. Historically, ML stands for metalanguage: it was conceived to develop proof tactics in the LCF theorem prover. It is known for its use of the Hindley–Milner type inference algorithm, which can automatically infer the types of most expressions without requiring explicit type annotations. Additionally, the use of this algorithm ensures type safety—there is a formal proof that a well-typed ML program does not cause runtime type errors."],"rdfs:label":["ML"],"ns:base.proofsareprograms.key_application.how_it_applied_the_concept":["ML, short for ‘metalanguage’ was the first programming language to make use of the Hindley-Milner type inference algorithm."],"key:en":["ml"],"ns:base.schemastaging.context_name.pronunciation":[{"ns:base.schemastaging.pronunciation.yomigana":["えむえる"],"rdf:type":["ns:base.schemastaging.pronunciation"]}],"ns:common.topic.article":[{"ns:common.document.text":["ML is a general-purpose functional programming language developed by Robin Milner and others in the early 1970s at the University of Edinburgh, whose syntax is inspired by ISWIM. Historically, ML stands for metalanguage: it was conceived to develop proof tactics in the LCF theorem prover (whose language, pplambda, a combination of the first-order predicate calculus and the simply typed polymorphic lambda calculus, had ML as its metalanguage). It is known for its use of the Hindley–Milner type inference algorithm, which can automatically infer the types of most expressions without requiring explicit type annotations.\\nML is often referred to as an impure functional language, because it encapsulates side-effects, unlike purely functional programming languages such as Haskell.\\nFeatures of ML include a call-by-value evaluation strategy, first-class functions, automatic memory management through garbage collection, parametric polymorphism, static typing, type inference, algebraic data types, pattern matching, and exception handling.\\nUnlike Haskell, ML uses eager evaluation, which means that all subexpressions are always evaluated. However, lazy evaluation can be achieved through the use"],"ns:common.document.source_uri":["<http://wp/en/20607>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.language_designers":["Robin Milner"],"ns:computer.programming_language.introduced":["1973"],"ns:type.object.name":["ML"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125btfx62"],"ns:computer.programming_language.influenced":["ns:m.0swpzmh"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"],"ns:computer.programming_language.influenced_by":["ns:m.04kyw"],"ns:computer.programming_language.dialects":["ns:m.0pkgc"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}