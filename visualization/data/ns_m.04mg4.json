{"ns:m.04mg4":{"ns:common.topic.description":["Lambda calculus is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. First formulated by Alonzo Church to formalize the concept of effective computability, lambda calculus found early successes in the area of computability theory, such as a negative answer to Hilbert's Entscheidungsproblem. Lambda calculus is a conceptually simple universal model of computation. The name derives from the Greek letter lambda used to denote binding a variable in a function. The letter itself is arbitrary and has no special meaning. Lambda calculus is taught and used in computer science because of its usefulness in showcasing functional thinking and iterative reduction.\\nBecause of the importance of the notion of variable binding and substitution, there is not just one system of lambda calculus, and in particular there are typed and untyped variants. Historically, the most important system was the untyped lambda calculus, in which function application has no restrictions."],"rdfs:label":["Lambda calculus"],"key:en":["lambda_calculus"],"ns:base.schemastaging.context_name.pronunciation":[{"ns:base.schemastaging.pronunciation.yomigana":["らむだけいさん"],"rdf:type":["ns:base.schemastaging.pronunciation"]}],"ns:common.topic.article":[{"ns:common.document.text":["Lambda calculus (also written as λ-calculus or called \\\"the lambda calculus\\\") is a formal system in mathematical logic for expressing computation by way of variable binding and substitution. It was first formulated by Alonzo Church as a way to formalize mathematics through the notion of functions, in contrast to the field of set theory. Although not very successful in that respect, the lambda calculus found early successes in the area of computability theory, such as a negative answer to Hilbert's Entscheidungsproblem.\\nBecause of the importance of the notion of variable binding and substitution, there is not just one system of lambda calculus. Historically, the most important system was the untyped lambda calculus. In the untyped lambda calculus, function application has no restrictions (so the notion of the domain of a function is not built into the system). In the Church–Turing Thesis, the untyped lambda calculus is claimed to be capable of computing all effectively calculable functions. The typed lambda calculus is a variety that restricts function application, so that functions can only be applied if they are capable of accepting the given input's \\\"type\\\" of data.\\nToday, the"],"ns:common.document.source_uri":["<http://wp/en/18203>"],"rdf:type":["ns:common.document"]}],"ns:base.proofsareprograms.key_concept.key_contribution":[{"ns:base.proofsareprograms.key_contribution.date":["1932"],"ns:base.proofsareprograms.key_contribution.why_this_is_interesting":["Church developed the theory of lambda calculus as a new formulation of logical deduction, and in 1936 realized that lambda terms could be used to express every function that could ever be computed by a machine. (Turning was his student at Princeton from 1936-1938.) Church reduced all calculation to the notion of substitution."],"ns:base.proofsareprograms.key_contribution.contributors":["ns:m.0d6m5"],"rdf:type":["ns:base.proofsareprograms.key_contribution"],"ns:base.proofsareprograms.key_contribution.key_concept":["ns:m.04mg4"]}],"ns:type.object.name":["Lambda calculus"],"rdf:type":["ns:law.invention"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125b2pf3j"],"ns:computer.programming_language.influenced":["ns:m.0270f0"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.dialects":["ns:m.04kyw"]}}