{"ns:m.03hjb_9":{"ns:common.topic.description":["Lazy ML is a functional programming language developed in the early 1980s by Lennart Augustsson and Thomas Johnsson at Chalmers University of Technology, prior to Miranda and Haskell. LML is a strongly typed, statically scoped implementation of ML, with lazy evaluation.\\nThe key innovation of LML was to demonstrate how to compile a lazy functional language. Until then, lazy languages had been implemented via interpreted graph reduction. LML compiled to G-machine code.\\nLML is also notable as the language in which HBC, the Haskell B Compiler, was implemented."],"rdfs:label":["Lazy ML"],"key:en":["lazy_ml"],"ns:common.topic.article":[{"ns:common.document.text":["Lazy ML (LML) is a functional programming language developed in the early 1980s by Lennart Augustsson and Thomas Johnsson at Chalmers University of Technology, prior to Miranda and Haskell. LML is a strongly typed, statically scoped implementation of ML, with lazy evaluation.\\nThe key innovation of LML was to demonstrate how to compile a lazy functional language. Until then, lazy languages had been implemented via interpreted graph reduction. LML compiled to G-machine code.\\nLML is also notable as the language in which HBC, the Haskell B Compiler, was implemented.\\nHello, world:\\nFactorial,"],"ns:common.document.source_uri":["<http://wp/en/15127519>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["Lazy ML"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1255zqbyk"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.04m47"],"ns:computer.programming_language.influenced":["ns:m.03j_q"]}}