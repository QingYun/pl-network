{"ns:m.090jt4":{"ns:common.topic.description":["In computer science, Programming Computable Functions, or PCF, is a typed functional language introduced in an unpublished 1969 manuscript by Dana Scott. It can be considered to be an extended version of the typed lambda calculus or a simplified version of modern typed functional languages such as ML.\\nA fully abstract model for PCF was first given by Milner. However, since Milner's model was essentially based on the syntax of PCF it was considered less than satisfactory. The first two fully abstract models not employing syntax were formulated during the 1990s. These models are based on game semantics and Kripke logical relations. For a time it was felt that neither of these models was completely satisfactory, since they were not effectively presentable. However, Ralph Loader demonstrated that no effectively presentable fully abstract model could exist, since the question of program equivalence in the finitary fragment of PCF is not decidable."],"rdfs:label":["Programming Computable Functions"],"key:en":["programming_language_for_computable_functions"],"ns:common.topic.article":[{"ns:common.document.text":["In computer science, Programming Computable Functions, or PCF, is a typed functional language introduced by Gordon Plotkin in 1977. It is based on the Logic of Computable Functions (LCF) by Dana Scott. It can be considered as an extended version of the typed lambda calculus or a simplified version of modern typed functional languages such as ML.\\nA fully abstract model for PCF was first given by Milner (1977). However, since Milner's model was essentially based on the syntax of PCF it was considered less than satisfactory (Ong, 1995). The first two fully abstract models not employing syntax were formulated during the 1990s. These models are based on game semantics (Hyland and Ong, 2000; Abramsky, Jagadeesan, and Malacaria, 2000) and Kripke logical relations (O'Hearn and Riecke, 1995). For a time it was felt that neither of these models was completely satisfactory, since they were not effectively presentable. However, Ralph Loader demonstrated that no effectively presentable fully abstract model could exist, since the question of program equivalence in the finitary fragment of PCF is not decidable.\\nThe types of PCF are inductively defined as\\nA context is a list of pairs x : σ, where"],"ns:common.document.source_uri":["<http://wp/en/3239232>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["Programming Computable Functions"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.1258v3w6g"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"]}}