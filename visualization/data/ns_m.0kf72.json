{"ns:m.0kf72":{"ns:common.topic.description":["HyperTalk is a high-level, procedural programming language created in 1987 by Dan Winkler and used in conjunction with Apple Computer's HyperCard hypermedia program by Bill Atkinson. The main target audience of HyperTalk was beginning programmers, hence HyperTalk programmers were usually called authors, and the process of writing programs was called \\\"scripting\\\". HyperTalk scripts are fairly similar to written English, and use a logic structure similar to the Pascal programming language.\\nIt supports the basic control structures of procedural languages: repeat for/while/until, if/then/else, as well as function and message \\\"handler\\\" calls. Data types are transparent to the user, conversion happens transparently in the background between strings and numbers. There are no classes or data structures in the traditional sense; their place was taken by special string literals, or rather \\\"lists\\\" of \\\"items\\\" delimited by commas.\\nThe case-insensitive language was interpreted at first, but gained just-in-time compilation with HyperCard 2.0."],"rdfs:label":["HyperTalk"],"key:en":["hypertalk"],"ns:base.schemastaging.context_name.pronunciation":[{"ns:base.schemastaging.pronunciation.yomigana":["はいぱーとーく"],"rdf:type":["ns:base.schemastaging.pronunciation"]}],"ns:computer.programming_language.developers":["Apple Inc."],"ns:common.topic.article":[{"ns:common.document.text":["HyperTalk is a high-level, procedural programming language created in 1987 by Dan Winkler and used in conjunction with Apple Computer's HyperCard hypermedia program by Bill Atkinson. The main target audience of HyperTalk was beginning programmers, hence HyperTalk programmers were usually called authors, and the process of writing programs was called \\\"scripting\\\". HyperTalk scripts are fairly similar to written English, and use a logic structure similar to the Pascal programming language.\\nThe case-insensitive language was interpreted at first, but became 'virtually compiled' since HyperCard 2.x. It supports the basic control structures of procedural languages: repeat for/while/until, if/then/else, as well as function and message \\\"handler\\\" calls (a handler is a subroutine, a message handler is a procedure). Data types are transparent to the user, conversion happens transparently in the background between strings and numbers. There are no classes or data structures in the traditional sense; their place was taken by special string literals, or rather \\\"lists\\\" of \\\"items\\\" delimited by commas (in later versions the \\\"itemDelimiter\\\" property allowed choosing an arbitrary character).\\nHyperTalk"],"ns:common.document.source_uri":["<http://wp/en/78136>"],"rdf:type":["ns:common.document"]}],"ns:type.object.name":["HyperTalk"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125b672ht"],"ns:computer.programming_language.influenced":["ns:m.0m4ps"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.05yd5"]}}