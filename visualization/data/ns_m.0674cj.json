{"ns:m.0674cj":{"ns:common.topic.description":["Epigram is a functional programming language with dependent types. Epigram also refers to the IDE usually packaged with the language. Epigram's type system is strong enough to express program specifications. The goal is to support a smooth transition from ordinary programming to integrated programs and proofs whose correctness can be checked and certified by the compiler. Epigram exploits the propositions as types principle, and is based on intuitionistic type theory.\\nThe Epigram prototype was implemented by Conor McBride based on joint work with James McKinna. Its development is continued by the Epigram group in Nottingham, Durham, St Andrews and Royal Holloway in the UK. The current experimental implementation of the Epigram system is freely available together with a user manual, a tutorial and some background material. The system has been used under Linux, Windows and Mac OS X.\\nIt is currently unmaintained, and version 2, which was intended to implement Observational Type Theory, was never released."],"rdfs:label":["Epigram"],"key:en":["epigram_programming_language"],"ns:common.topic.official_website":["<http://www.e-pig.org/>"],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bl49ml"],"ns:common.webpage.uri":["<http://www.e-pig.org/>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.0674cj"]}],"ns:common.topic.article":[{"ns:common.document.text":["Epigram is the name of a functional programming language with dependent types. Epigram also refers to the IDE usually packaged with the language. Epigram's type system is strong enough to express program specifications. The goal is to support a smooth transition from ordinary programming to integrated programs and proofs whose correctness can be checked and certified by the compiler. Epigram exploits the propositions as types principle, and is based on intuitionistic type theory.\\nThe Epigram prototype was implemented by Conor McBride based on joint work with James McKinna. Its development is continued by the Epigram group in Nottingham, Durham, St Andrews and Royal Holloway in the UK. The current experimental implementation of the Epigram system is freely available together with a user manual, a tutorial and some background material. The system has been used under Linux, Windows and Mac OS X.\\nEpigram uses a two-dimensional syntax, with a LaTeX version and an ASCII version. Here are some examples from The Epigram Tutorial:\\nThe following declaration defines the natural numbers:\\nThe declaration says that Nat is a type with kind * (i.e., it is a simple type) and two constructors: zero"],"ns:common.document.source_uri":["<http://wp/en/1933143>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["2004"],"ns:type.object.name":["Epigram"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.12591f0sc"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.language_paradigms":["ns:m.02ykw"],"ns:computer.programming_language.influenced_by":["ns:m.03r9j8"],"ns:computer.programming_language.influenced":["ns:m.0swpzmh"]}}