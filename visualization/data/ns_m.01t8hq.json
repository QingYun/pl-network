{"ns:m.01t8hq":{"ns:common.topic.description":["Q is an interpreted, interactive functional programming language created by Albert Gräf at the University of Mainz in Germany. Q programs are just collections of equations which are used to evaluate expressions in a symbolic fashion. Q has many similarities with other modern functional programming languages like Haskell and ML, but is based on general term rewriting instead of the lambda calculus.\\nDespite its conceptual simplicity, Q is a full-featured functional programming language with a modern syntax, currying, dynamic typing using an object-oriented type system, exception handling, POSIX multithreading, a comprehensive standard library, and an interface to the C programming language. Q is an impure functional language with a default eager evaluation strategy; \\\"special forms\\\" can be used to implement data structures and operations featuring lazy evaluation. Q has been ported to a variety of operating systems, including BeOS, FreeBSD, Linux, Mac OS X, Solaris and Microsoft Windows. The interpreter is free software distributed under the GNU General Public License."],"rdfs:label":["Q"],"key:en":["q_programming_language"],"ns:common.topic.official_website":["<http://www.q-lang.sourceforge.net/>"],"ns:common.topic.article":[{"ns:common.document.text":["Q (short for equational programming language) is an interpreted, interactive functional programming language created by Albert Gräf at the University of Mainz in Germany. Q programs are just collections of equations which are used to evaluate expressions in a symbolic fashion. Q has many similarities with other modern functional programming languages like Haskell and ML, but is based on general term rewriting (a method of computation also used by the Mathematica computer algebra system) instead of the lambda calculus.\\nDespite its conceptual simplicity, Q is a full-featured functional programming language with a modern syntax, currying, dynamic typing using an object-oriented type system, exception handling, POSIX multithreading, a comprehensive standard library, and an interface to the C programming language. Q is an impure functional language (i.e., operations with side-effects are permitted) with a default eager evaluation strategy; \\\"special forms\\\" can be used to implement data structures and operations featuring lazy evaluation. Q has been ported to a variety of operating systems, including BeOS, FreeBSD, Linux, Mac OS X, Solaris and Microsoft Windows. The interpreter is free"],"ns:common.document.source_uri":["<http://wp/en/311741>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.language_designers":["Albert Gräf"],"ns:common.topic.webpage":[{"ns:common.webpage.uri":["<http://q-lang.sourceforge.net/>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.01t8hq"]}],"ns:type.object.name":["Q"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.125bxt50f"],"ns:computer.programming_language.language_paradigms":["ns:m.05prj"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced":["ns:m.04zzxjs"],"ns:computer.programming_language.influenced_by":["ns:m.0q1d"]}}