{"ns:m.0336_z":{"ns:common.topic.description":["A Hartmann pipeline is an extension of the Unix pipeline concept, providing for more complex paths, multiple input/output streams, and other features. It is an example and extension of Pipeline programming.\\nA Hartmann pipe is a non-procedural representation of a solution of a data processing problem as a dataflow. The error-prone step of translating the dataflow to a traditional procedural programming language is eliminated. Hartmann pipelines may thus be considered as an executable specification language.\\nThe concept was developed by John Poul Hartmann, a Danish engineer with IBM. It is available as a software product CMS/TSO Pipelines for a number of IBM platforms. A somewhat backlevel version is included with every level of VM/ESA and z/VM."],"rdfs:label":["Hartmann pipeline"],"key:en":["hartmann_pipeline"],"ns:common.topic.official_website":["<http://vm.marist.edu/~pipeline>"],"ns:common.topic.article":[{"ns:common.document.text":["A Hartmann pipeline is an extension of the Unix pipeline concept, providing for more complex paths, multiple input/output streams, and other features. It is an example and extension of Pipeline programming.\\nA Hartmann pipe is a non-procedural representation of a solution of a data processing problem as a dataflow. The error-prone step of translating the dataflow to a traditional procedural programming language is eliminated. Hartmann pipelines may thus be considered as an executable specification language.\\nThe concept was developed by John Poul Hartmann (born 1946), a Danish engineer with IBM. It is available as a software product CMS/TSO Pipelines for a number of IBM platforms. A somewhat backlevel version is included with every level of VM/ESA and z/VM.\\nA pipeline consists of a collection of stages, joined together by stage separators. Stages can be written in a variety of languages, and are either filters that process data records or device drivers (sources and sinks) that read data into or out of the pipeline. Unlike other implementations of pipeline programming, Hartmann's design has multiple streams in and out of each stage and can interconnect them non-sequentially. Unlike"],"ns:common.document.source_uri":["<http://wp/en/692211>"],"rdf:type":["ns:common.document"]}],"ns:common.topic.webpage":[{"ns:common.webpage.category":["ns:m.08mbj5d"],"ns:common.webpage.resource":["ns:m.0bl3121"],"ns:common.webpage.uri":["<http://vm.marist.edu/~pipeline>"],"rdf:type":["ns:common.webpage"],"ns:common.webpage.topic":["ns:m.0336_z"]}],"ns:computer.programming_language.developers":["IBM"],"ns:computer.programming_language.introduced":["1986"],"ns:type.object.name":["Hartmann pipeline"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.12551k2lw"],"ns:common.topic.notable_types":["ns:m.01xrl_t"],"ns:computer.programming_language.influenced_by":["ns:m.0q1d"]}}