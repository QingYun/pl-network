{"ns:m.069sx3":{"ns:common.topic.description":["Ease is a general purpose parallel programming language, designed by Steven Ericsson-Zenith of Yale University. It combines the process constructs of CSP with logically shared data structures called contexts. Contexts are parallel data types that are constructed by processes and provide a way for processes to interact.\\nThe language includes two process constructors.\\nA cooperation includes an explicit barrier synchronization and is written:\\nIf one process finishes before the other then it will wait until the other processes are finished.\\nA subordination creates a process that shares the contexts that are in scope when created and finishes when complete and is written:\\nSubordinate processes stop if they attempt to interact with a context that has completed because the parent process has stopped. This enables speculative processes to be created that will finish if their result is not needed.\\nPowerful replication syntax allows multiple processes to be created. For example\\ncreates n synchronized processes each with a local constant i.\\nProcesses cannot share local variables and cooperate in the construction of shared contexts."],"rdfs:label":["Ease"],"key:en":["ease_programming_language"],"ns:common.topic.article":[{"ns:common.document.text":["Ease is a general purpose parallel programming language, designed by Steven Ericsson-Zenith of Yale University. It combines the process constructs of CSP with logically shared data structures called contexts. Contexts are parallel data types that are constructed by processes and provide a way for processes to interact.\\nThe language includes two process constructors.\\nA cooperation includes an explicit barrier synchronization and is written:\\nIf one process finishes before the other than it will wait until the other processes are finished.\\nA subordination creates a process that shares the contexts that are in scope when created and finishes when complete (it does not wait for other processes) and is written:\\nSubordinate processes stop if they attempt to interact with a context that has completed because the parent process has stopped. This enables speculative processes to be created that will finish if their result is not needed.\\nPowerful replication syntax allows multiple processes to be created. For example\\ncreates n synchronized processes each with a local constant i.\\nProcesses cannot share local variables and cooperate in the construction of shared contexts. Certain context types,"],"ns:common.document.source_uri":["<http://wp/en/1968693>"],"rdf:type":["ns:common.document"]}],"ns:computer.programming_language.introduced":["1990"],"ns:type.object.name":["Ease"],"rdf:type":["ns:computer.programming_language"],"ns:kg.object_profile.prominent_type":["ns:computer.programming_language"],"ns:common.topic.notable_for":["ns:g.12551_x85"],"ns:computer.programming_language.language_paradigms":["ns:m.07phw8"],"ns:computer.programming_language.influenced_by":["ns:m.05p0d"],"ns:common.topic.notable_types":["ns:m.01xrl_t"]}}